1. Se instala tailwindcss-> ver documentacion.
2. Se instala react-router-dom , esta ya incluye a react-router -> nmpjs react-router-dom
3. Cambiamos el nombre de App.tsx a RouterApp.tsx, aca esta la base de las rutas que van a ser views o pages
- Las vistas o paginas se agrupan en una carpeta y los elementos del layout se nombran como componentes en su respectiva carpeta.
Para crear un layout persistente importamos Outlet de react-router-dom. Rodeamos las views o pages que queremos que COMPARTAN layout.

Capitulo UseLocation y 'theming de tailwindcss': se usa directamente la notacion de corchete con la clase de tailwind para indicar el estilo bg-[value] la documentacion es https://tailwindcss.com/docs/adding-custom-styles. Y combinando UseLocation y theming se hacen vistas dinamicas cambiando componentes como form y estilos como bg-image dependiendo de la ruta en que estemos '/' '/favoritos'.

- Multiples stores con Zustand: En tu buscador de bebidas, usar múltiples stores (o un único store dividido en slices) se hace para:

Separar responsabilidades → cada parte del estado (búsqueda, recetas, favoritos) está aislada.

Escalar fácilmente → es más simple agregar nuevas funciones sin romper las existentes.

Mejor mantenibilidad → cada store/slice es independiente, fácil de probar y modificar.

Evitar acoplamiento → cambios en una parte del estado no afectan otras.

4- Se crea la carpeta stores y un archivo useAppStore.ts que es el principal y de ahi va agrupando los slices.

5- Creamos una carpeta services para las funciones que llaman a la api. la API que usamos es https://www.thecocktaildb.com/
6- Creamos la carpeta schemas o utils para definir los schemas de respuesta de API con Zod.
7- Usamos Headless UI para el modal de notificaciones. lo importamos en layout.
8- Creamos nuevo slice que maneja FAVORITOS. Ya lo que tiene que ver con buscar y mostrar recetas lo hicimos en el slice de recetas
Todo esto se hace para mejor ORGANIZACION del codigo del proyecto, las logicas separadas, queda mas lindo. Se le conoce como el Slice Pattern.
9- Creamos otro slice para las notificaciones.
10- Copiamos el componente Notification de los recursos de la clase y lo importamos en layout como hicimos con Modal.
11- Se usa la funcion lazy y el componente Suspense de react para mejorar la PERFORMANCE de la APP. Con eso dividimos los archivos del build y asi el user va a descargar las paginas de la app conforme las vaya visitando y no todos los archivos de la app al inicio. Esto esta en RouterApp.tsx